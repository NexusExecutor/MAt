const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

const token = '7217537023:AAFvjMkI4eC7cP4_KxGc69u9EYFE9JHnT28';
const bot = new TelegramBot(token, { polling: true });

const questions = JSON.parse(fs.readFileSync('./questions.json', 'utf-8'));
let userSessions = {};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    userSessions[chatId] = { currentIndex: 0, score: 0, difficulty: 'normal', mode: 'standard' };

    bot.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ú–∞—Ç–µ–º–∞–≥–∏—é"!\n\nüéØ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–∞–¥–∫–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:`, {
        reply_markup: {
            keyboard: [
                ['üìö –ò–≥—Ä–∞—Ç—å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
                ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
            ],
            resize_keyboard: true,  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
            one_time_keyboard: true // –ö–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions[chatId] || {};
    const text = msg.text;

    if (text === 'üìö –ò–≥—Ä–∞—Ç—å') {
        session.currentIndex = 0; // –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        sendQuestion(chatId);
    } else if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
        showSettings(chatId);
    } else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        showStats(chatId);
    } else if (text === 'üîô –í –º–µ–Ω—é') {
        showMainMenu(chatId);
    } else if (text.startsWith('difficulty_')) {
        const difficulty = text.split('_')[1];
        session.difficulty = difficulty;
        bot.sendMessage(chatId, `üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${difficulty.toUpperCase()}`);
    } else if (text.startsWith('mode_')) {
        const mode = text.split('_')[1];
        session.mode = mode;
        bot.sendMessage(chatId, `üéÆ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${mode === 'standard' ? '–û–±—ã—á–Ω—ã–π' : '–° —Ç–∞–π–º–µ—Ä–æ–º'}`);
    } else {
        handleAnswer(chatId, text);
    }
});

function sendQuestion(chatId) {
    const session = userSessions[chatId];
    const filteredQuestions = questions.filter(q => q.difficulty === session.difficulty);

    if (!filteredQuestions.length) {
        bot.sendMessage(chatId, `‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.`);
        return;
    }

    const question = filteredQuestions[session.currentIndex % filteredQuestions.length];
    const correctAnswer = question.answer;

    const options = generateOptions(correctAnswer);
    bot.sendPhoto(chatId, question.image, {
        caption: `‚ùì ${question.text}\n\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${session.difficulty.toUpperCase()}\n\nüìä –°—á—ë—Ç: ${session.score}`,
        reply_markup: {
            keyboard: options.map((opt) => ([
                { text: opt }
            ])),
        },
    });
}

function handleAnswer(chatId, userAnswer) {
    const session = userSessions[chatId];
    const filteredQuestions = questions.filter(q => q.difficulty === session.difficulty);
    const question = filteredQuestions[session.currentIndex % filteredQuestions.length];

    if (userAnswer === question.answer) {
        session.score += 1;
        bot.sendMessage(chatId, `‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à —Å—á—ë—Ç: ${session.score}`);
    } else {
        bot.sendMessage(chatId, `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${question.answer}`);
    }

    session.currentIndex += 1;
    sendQuestion(chatId);
}

function generateOptions(correctAnswer) {
    const options = new Set([correctAnswer]);
    while (options.size < 4) {
        const randomOption = (Math.random() * 200).toFixed(2);
        if (randomOption !== correctAnswer) options.add(randomOption);
    }
    return Array.from(options).sort(() => Math.random() - 0.5);
}

function showSettings(chatId) {
    bot.sendMessage(chatId, `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`, {
        reply_markup: {
            keyboard: [
                ['üü¢ –ü—Ä–æ—Å—Ç—ã–µ', 'üîµ –°—Ä–µ–¥–Ω–∏–µ', 'üî¥ –°–ª–æ–∂–Ω—ã–µ'],
                ['üéÆ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º', '‚è±Ô∏è –†–µ–∂–∏–º —Å —Ç–∞–π–º–µ—Ä–æ–º'],
                ['üîô –í –º–µ–Ω—é']
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
}

function showStats(chatId) {
    const session = userSessions[chatId];
    const statsMessage = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: ${session.currentIndex}
- –°—á—ë—Ç: ${session.score}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${session.difficulty.toUpperCase()}
- –†–µ–∂–∏–º: ${session.mode === 'standard' ? '–û–±—ã—á–Ω—ã–π' : '–° —Ç–∞–π–º–µ—Ä–æ–º'}
    `;
    bot.sendMessage(chatId, statsMessage, {
        reply_markup: {
            keyboard: [
                ['üîô –í –º–µ–Ω—é']
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
}

// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId) {
    bot.sendMessage(chatId, `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
        reply_markup: {
            keyboard: [
                ['üìö –ò–≥—Ä–∞—Ç—å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
                ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
            ],
            resize_keyboard: true,  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
            one_time_keyboard: true // –ö–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        }
    });
}
